{"version":3,"file":"error.middleware.js","sourceRoot":"","sources":["../../src/middleware/error.middleware.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,GAAU,EACV,GAAY,EACZ,GAAa,EACb,IAAkB,EACZ,EAAE;IACR,8BAA8B;IAC9B,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;IAEvC,uCAAuC;IACvC,WAAW,CAAC,KAAK,CACf,GAAG,EACH,GAAG,CAAC,OAAO,IAAI,8BAA8B,EAC7C,GAAG,EACH,cAAc,EACd,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAC1E,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,GAAY,EACZ,GAAa,EACP,EAAE;IACR,WAAW,CAAC,KAAK,CACf,GAAG,EACH,oBAAoB,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,WAAW,EAAE,EACnD,GAAG,EACH,WAAW,CACZ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { apiResponse } from '../utils/api.utils.js';\r\n\r\n/**\r\n * Error handler middleware\r\n * \r\n * This middleware catches all unhandled errors in the application\r\n * and formats them as a standardized API response.\r\n */\r\nexport const errorHandler = (\r\n  err: Error,\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void => {\r\n  // Log the error for debugging\r\n  console.error('Unhandled error:', err);\r\n  \r\n  // Return a standardized error response\r\n  apiResponse.error(\r\n    res,\r\n    err.message || 'An unexpected error occurred',\r\n    500,\r\n    'SERVER_ERROR',\r\n    process.env.NODE_ENV === 'development' ? { stack: err.stack } : undefined\r\n  );\r\n};\r\n\r\n/**\r\n * Not found handler middleware\r\n * \r\n * This middleware catches all requests to non-existent routes\r\n * and returns a standardized 404 response.\r\n */\r\nexport const notFoundHandler = (\r\n  req: Request,\r\n  res: Response\r\n): void => {\r\n  apiResponse.error(\r\n    res,\r\n    `Route not found: ${req.method} ${req.originalUrl}`,\r\n    404,\r\n    'NOT_FOUND'\r\n  );\r\n}; "]}