{"version":3,"file":"validation.middleware.js","sourceRoot":"","sources":["../../src/middleware/validation.middleware.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,MAAgB,EAChB,SAAsC,MAAM,EAC5C,EAAE;IACF,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACzD,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEzC,mDAAmD;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC;YAE5B,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAChC,+BAA+B;gBAC/B,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBAC/C,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;oBACxB,OAAO,EAAE,GAAG,CAAC,OAAO;iBACrB,CAAC,CAAC,CAAC;gBAEJ,WAAW,CAAC,KAAK,CACf,GAAG,EACH,kBAAkB,EAClB,GAAG,EACH,kBAAkB,EAClB,eAAe,CAChB,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,WAAW,CAAC,KAAK,CACf,GAAG,EACH,gDAAgD,EAChD,GAAG,CACJ,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { z } from 'zod';\r\nimport { apiResponse } from '../utils/api.utils.js';\r\n\r\n/**\r\n * Middleware factory for validating request data against Zod schemas\r\n * @param schema The Zod schema to validate against\r\n * @param source Where to find the data to validate ('body', 'query', 'params')\r\n */\r\nexport const validateRequest = (\r\n  schema: z.Schema,\r\n  source: 'body' | 'query' | 'params' = 'body'\r\n) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const data = req[source];\r\n      const validatedData = schema.parse(data);\r\n      \r\n      // Replace the request data with the validated data\r\n      req[source] = validatedData;\r\n      \r\n      next();\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        // Format the validation errors\r\n        const formattedErrors = error.errors.map(err => ({\r\n          path: err.path.join('.'),\r\n          message: err.message\r\n        }));\r\n        \r\n        apiResponse.error(\r\n          res, \r\n          'Validation error', \r\n          400, \r\n          'VALIDATION_ERROR', \r\n          formattedErrors\r\n        );\r\n      } else {\r\n        apiResponse.error(\r\n          res, \r\n          'An unexpected error occurred during validation', \r\n          500\r\n        );\r\n      }\r\n    }\r\n  };\r\n}; "]}