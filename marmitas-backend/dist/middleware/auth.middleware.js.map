{"version":3,"file":"auth.middleware.js","sourceRoot":"","sources":["../../src/middleware/auth.middleware.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAiBpD;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAC/B,GAAY,EACZ,GAAa,EACb,IAAkB,EACH,EAAE;IACjB,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAE7C,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,yBAAyB,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;YACvE,OAAO;QACT,CAAC;QAED,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvC,mBAAmB;QACnB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE3D,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACxB,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,0BAA0B,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;YACzE,OAAO;QACT,CAAC;QAED,yBAAyB;QACzB,GAAG,CAAC,IAAI,GAAG;YACT,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE;YAChB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAM;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,MAAM;SAC5C,CAAC;QAEF,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,WAAW,CAAC,KAAK,CACf,GAAG,EACH,uBAAuB,EACvB,GAAG,EACH,YAAY,CACb,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAwB,EAAE,EAAE;IACpD,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAE5D,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;QAC/D,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,yBAAyB,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;YACvE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1C,WAAW,CAAC,KAAK,CACf,GAAG,EACH,0BAA0B,EAC1B,GAAG,EACH,WAAW,CACZ,CAAC;YACF,OAAO;QACT,CAAC;QAED,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { supabase } from '../config/supabase.js';\r\nimport { apiResponse } from '../utils/api.utils.js';\r\n\r\n/**\r\n * Extend Express Request type to include user information\r\n */\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      user?: {\r\n        id: string;\r\n        email: string;\r\n        role: string;\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Middleware to authenticate requests using JWT token\r\n */\r\nexport const authenticate = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): Promise<void> => {\r\n  try {\r\n    const authHeader = req.headers.authorization;\r\n    \r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      apiResponse.error(res, 'Authentication required', 401, 'UNAUTHORIZED');\r\n      return;\r\n    }\r\n    \r\n    const token = authHeader.split(' ')[1];\r\n    \r\n    // Verify the token\r\n    const { data, error } = await supabase.auth.getUser(token);\r\n    \r\n    if (error || !data.user) {\r\n      apiResponse.error(res, 'Invalid or expired token', 401, 'INVALID_TOKEN');\r\n      return;\r\n    }\r\n    \r\n    // Attach user to request\r\n    req.user = {\r\n      id: data.user.id,\r\n      email: data.user.email!,\r\n      role: data.user.app_metadata.role || 'user'\r\n    };\r\n    \r\n    next();\r\n  } catch (error) {\r\n    apiResponse.error(\r\n      res, \r\n      'Authentication failed', \r\n      500, \r\n      'AUTH_ERROR'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Middleware to check if user has required role\r\n */\r\nexport const authorize = (roles: string | string[]) => {\r\n  const allowedRoles = Array.isArray(roles) ? roles : [roles];\r\n  \r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    if (!req.user) {\r\n      apiResponse.error(res, 'Authentication required', 401, 'UNAUTHORIZED');\r\n      return;\r\n    }\r\n    \r\n    if (!allowedRoles.includes(req.user.role)) {\r\n      apiResponse.error(\r\n        res, \r\n        'Insufficient permissions', \r\n        403, \r\n        'FORBIDDEN'\r\n      );\r\n      return;\r\n    }\r\n    \r\n    next();\r\n  };\r\n}; "]}