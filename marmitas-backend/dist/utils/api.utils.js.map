{"version":3,"file":"api.utils.js","sourceRoot":"","sources":["../../src/utils/api.utils.ts"],"names":[],"mappings":"AAQA;;GAEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG;IACzB;;OAEG;IACH,OAAO,CAAI,GAAa,EAAE,IAAO,EAAE,UAAU,GAAG,GAAG;QACjD,MAAM,QAAQ,GAAmB;YAC/B,IAAI;YACJ,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QACF,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,KAAK,CACH,GAAa,EACb,OAAe,EACf,UAAU,GAAG,GAAG,EAChB,IAAa,EACb,OAA6B;QAE7B,MAAM,QAAQ,GAAqB;YACjC,KAAK,EAAE;gBACL,OAAO;gBACP,IAAI,EAAE,IAAI,IAAI,SAAS;gBACvB,OAAO,EAAE,OAAO,IAAI,SAAS;aAC9B;YACD,MAAM,EAAE,OAAO;YACf,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QACF,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,SAAS,CACP,GAAa,EACb,IAAS,EACT,KAAa,EACb,MAAwB;QAExB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;QAC9B,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC;QAE/C,MAAM,QAAQ,GAAyB;YACrC,IAAI;YACJ,UAAU,EAAE;gBACV,KAAK;gBACL,IAAI;gBACJ,QAAQ;gBACR,UAAU;aACX;YACD,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QACF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAAU,EAAoB,EAAE;IACpE,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;QACxD,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,WAAW;QAC/B,SAAS,EAAG,KAAK,CAAC,SAA4B,IAAI,MAAM;KACzD,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAY,EAAE,QAAgB,EAAU,EAAE;IACxE,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["import { Response } from 'express';\r\nimport { \r\n  ApiResponse, \r\n  ApiErrorResponse, \r\n  PaginatedResponse, \r\n  PaginationParams\r\n} from '../types/api.types.js';\r\n\r\n/**\r\n * API response utilities for standardizing response formats\r\n */\r\nexport const apiResponse = {\r\n  /**\r\n   * Send a success response\r\n   */\r\n  success<T>(res: Response, data: T, statusCode = 200): void {\r\n    const response: ApiResponse<T> = {\r\n      data,\r\n      status: 'success',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    res.status(statusCode).json(response);\r\n  },\r\n\r\n  /**\r\n   * Send an error response\r\n   */\r\n  error(\r\n    res: Response, \r\n    message: string, \r\n    statusCode = 500, \r\n    code?: string, \r\n    details?: Record<string, any>\r\n  ): void {\r\n    const response: ApiErrorResponse = {\r\n      error: {\r\n        message,\r\n        code: code || undefined,\r\n        details: details || undefined\r\n      },\r\n      status: 'error',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    res.status(statusCode).json(response);\r\n  },\r\n\r\n  /**\r\n   * Send a paginated response\r\n   */\r\n  paginated<T>(\r\n    res: Response,\r\n    data: T[],\r\n    total: number,\r\n    params: PaginationParams\r\n  ): void {\r\n    const page = params.page || 1;\r\n    const pageSize = params.pageSize || 10;\r\n    const totalPages = Math.ceil(total / pageSize);\r\n\r\n    const response: PaginatedResponse<T> = {\r\n      data,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        pageSize,\r\n        totalPages\r\n      },\r\n      status: 'success',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    res.status(200).json(response);\r\n  }\r\n};\r\n\r\n/**\r\n * Parse pagination parameters from request query\r\n */\r\nexport const parsePaginationParams = (query: any): PaginationParams => {\r\n  return {\r\n    page: query.page ? parseInt(query.page) : 1,\r\n    pageSize: query.pageSize ? parseInt(query.pageSize) : 10,\r\n    sort: query.sort || 'createdAt',\r\n    direction: (query.direction as 'asc' | 'desc') || 'desc'\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate offset from pagination parameters\r\n */\r\nexport const calculateOffset = (page: number, pageSize: number): number => {\r\n  return (page - 1) * pageSize;\r\n}; "]}