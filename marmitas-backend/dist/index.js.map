{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAEjF,6BAA6B;AAC7B,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,wBAAwB;AACxB,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAEtC,aAAa;AACb,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;AAClB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;IACX,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,uBAAuB;IAC1D,WAAW,EAAE,IAAI;CAClB,CAAC,CAAC,CAAC;AACJ,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAEvB,wBAAwB;AACxB,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AAC9E,CAAC,CAAC,CAAC;AAEH,aAAa;AACb,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAE3B,oBAAoB;AACpB,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAEzB,4BAA4B;AAC5B,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAEtB,eAAe;AACf,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,EAAE,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport morgan from 'morgan';\r\nimport dotenv from 'dotenv';\r\nimport { apiRoutes } from './routes/index.js';\r\nimport { errorHandler, notFoundHandler } from './middleware/error.middleware.js';\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\n// Create Express server\r\nconst app = express();\r\nconst port = process.env.PORT || 3001;\r\n\r\n// Middleware\r\napp.use(helmet());\r\napp.use(cors({\r\n  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',\r\n  credentials: true,\r\n}));\r\napp.use(express.json());\r\napp.use(morgan('dev'));\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });\r\n});\r\n\r\n// API Routes\r\napp.use('/api', apiRoutes);\r\n\r\n// Not found handler\r\napp.use(notFoundHandler);\r\n\r\n// Error handling middleware\r\napp.use(errorHandler);\r\n\r\n// Start server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n}); "]}