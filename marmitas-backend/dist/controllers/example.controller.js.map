{"version":3,"file":"example.controller.js","sourceRoot":"","sources":["../../src/controllers/example.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { dbService } from '../services/database.service.js';\r\n\r\n/**\r\n * ExampleController - Example controller to demonstrate API structure\r\n */\r\nexport class ExampleController {\r\n  /**\r\n   * Get a list of items\r\n   */\r\n  async getItems(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const items = await dbService.find('example_table', {\r\n        limit: parseInt(req.query.limit as string) || 10,\r\n        offset: parseInt(req.query.offset as string) || 0,\r\n      });\r\n      \r\n      res.json({ items });\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        error: {\r\n          message: error.message || 'Failed to retrieve items',\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a single item by ID\r\n   */\r\n  async getItemById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const item = await dbService.findById('example_table', req.params.id);\r\n      \r\n      if (!item) {\r\n        res.status(404).json({\r\n          error: {\r\n            message: 'Item not found',\r\n          },\r\n        });\r\n        return;\r\n      }\r\n      \r\n      res.json({ item });\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        error: {\r\n          message: error.message || 'Failed to retrieve item',\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new item\r\n   */\r\n  async createItem(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const newItem = await dbService.create('example_table', req.body);\r\n      res.status(201).json({ item: newItem });\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        error: {\r\n          message: error.message || 'Failed to create item',\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing item\r\n   */\r\n  async updateItem(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const updatedItem = await dbService.update('example_table', req.params.id, req.body);\r\n      res.json({ item: updatedItem });\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        error: {\r\n          message: error.message || 'Failed to update item',\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete an item\r\n   */\r\n  async deleteItem(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      await dbService.delete('example_table', req.params.id);\r\n      res.status(204).send();\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        error: {\r\n          message: error.message || 'Failed to delete item',\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const exampleController = new ExampleController();\r\nexport default exampleController; "]}