{"version":3,"file":"database.service.js","sourceRoot":"","sources":["../../src/services/database.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { supabase } from '../config/supabase.js';\r\n\r\n/**\r\n * DatabaseService - A service for handling database operations\r\n * \r\n * This service encapsulates database access logic, ensuring that\r\n * all database operations are performed through the backend API.\r\n */\r\nexport class DatabaseService {\r\n  /**\r\n   * Execute a query on the specified table\r\n   * @param table The table to query\r\n   * @param queryFn Function to build the query\r\n   * @returns Query result\r\n   */\r\n  async executeQuery<T>(\r\n    table: string,\r\n    queryFn: (query: any) => any\r\n  ): Promise<T[]> {\r\n    try {\r\n      const query = supabase.from(table);\r\n      const { data, error } = await queryFn(query);\r\n      \r\n      if (error) {\r\n        throw new Error(`Database query error: ${error.message}`);\r\n      }\r\n      \r\n      return data || [];\r\n    } catch (error: any) {\r\n      console.error(`Database error in ${table}:`, error);\r\n      throw new Error(`Database operation failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find records in a table\r\n   * @param table The table to query\r\n   * @param options Query options (filters, pagination, etc.)\r\n   * @returns Matching records\r\n   */\r\n  async find<T>(\r\n    table: string,\r\n    options: { \r\n      filter?: Record<string, any>;\r\n      orderBy?: { column: string; ascending?: boolean };\r\n      limit?: number;\r\n      offset?: number;\r\n    } = {}\r\n  ): Promise<T[]> {\r\n    return this.executeQuery<T>(table, (query) => {\r\n      let queryBuilder = query.select('*');\r\n      \r\n      // Apply filter if provided\r\n      if (options.filter) {\r\n        Object.entries(options.filter).forEach(([key, value]) => {\r\n          queryBuilder = queryBuilder.eq(key, value);\r\n        });\r\n      }\r\n      \r\n      // Apply ordering if provided\r\n      if (options.orderBy) {\r\n        const { column, ascending = true } = options.orderBy;\r\n        queryBuilder = queryBuilder.order(column, { ascending });\r\n      }\r\n      \r\n      // Apply pagination if provided\r\n      if (options.limit) {\r\n        queryBuilder = queryBuilder.limit(options.limit);\r\n      }\r\n      \r\n      if (options.offset) {\r\n        queryBuilder = queryBuilder.range(options.offset, options.offset + (options.limit || 10) - 1);\r\n      }\r\n      \r\n      return queryBuilder;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Find a single record by ID\r\n   * @param table The table to query\r\n   * @param id The ID of the record\r\n   * @returns The found record or null\r\n   */\r\n  async findById<T>(table: string, id: string): Promise<T | null> {\r\n    const results = await this.executeQuery<T>(table, (query) => \r\n      query.select('*').eq('id', id).limit(1)\r\n    );\r\n    \r\n    return results.length > 0 ? results[0] : null;\r\n  }\r\n\r\n  /**\r\n   * Create a new record\r\n   * @param table The table to insert into\r\n   * @param data The data to insert\r\n   * @returns The created record\r\n   */\r\n  async create<T>(table: string, data: Partial<T>): Promise<T> {\r\n    const results = await this.executeQuery<T>(table, (query) => \r\n      query.insert(data).select()\r\n    );\r\n    \r\n    if (!results.length) {\r\n      throw new Error('Failed to create record');\r\n    }\r\n    \r\n    return results[0];\r\n  }\r\n\r\n  /**\r\n   * Update an existing record\r\n   * @param table The table to update\r\n   * @param id The ID of the record to update\r\n   * @param data The data to update\r\n   * @returns The updated record\r\n   */\r\n  async update<T>(table: string, id: string, data: Partial<T>): Promise<T> {\r\n    const results = await this.executeQuery<T>(table, (query) => \r\n      query.update(data).eq('id', id).select()\r\n    );\r\n    \r\n    if (!results.length) {\r\n      throw new Error(`Record with ID ${id} not found`);\r\n    }\r\n    \r\n    return results[0];\r\n  }\r\n\r\n  /**\r\n   * Delete a record\r\n   * @param table The table to delete from\r\n   * @param id The ID of the record to delete\r\n   * @returns Whether the deletion was successful\r\n   */\r\n  async delete(table: string, id: string): Promise<boolean> {\r\n    const { error } = await supabase\r\n      .from(table)\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) {\r\n      throw new Error(`Failed to delete record: ${error.message}`);\r\n    }\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const dbService = new DatabaseService();\r\nexport default dbService; "]}