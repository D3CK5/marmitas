{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../src/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { supabase } from '../config/supabase.js';\r\nimport { User } from '../types/api.types.js';\r\n\r\n/**\r\n * AuthService - Service for handling authentication operations\r\n */\r\nexport class AuthService {\r\n  /**\r\n   * Register a new user\r\n   * @param userData User registration data\r\n   * @returns User object and session token\r\n   */\r\n  async register(userData: User.CreateRequest): Promise<{ user: User.Response; token: string }> {\r\n    // Register the user with Supabase Auth\r\n    const { data: authData, error: authError } = await supabase.auth.signUp({\r\n      email: userData.email,\r\n      password: userData.password\r\n    });\r\n    \r\n    if (authError) {\r\n      throw new Error(`Authentication error: ${authError.message}`);\r\n    }\r\n    \r\n    if (!authData.user) {\r\n      throw new Error('Failed to create user');\r\n    }\r\n    \r\n    // Create user profile in the users table\r\n    const { data: profileData, error: profileError } = await supabase\r\n      .from('users')\r\n      .insert([{\r\n        id: authData.user.id,\r\n        email: userData.email,\r\n        name: userData.name,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (profileError) {\r\n      // Attempt to clean up the auth user if profile creation fails\r\n      await supabase.auth.admin.deleteUser(authData.user.id);\r\n      throw new Error(`Profile creation error: ${profileError.message}`);\r\n    }\r\n    \r\n    return {\r\n      user: {\r\n        id: profileData.id,\r\n        email: profileData.email,\r\n        name: profileData.name,\r\n        createdAt: profileData.created_at,\r\n        updatedAt: profileData.updated_at\r\n      },\r\n      token: authData.session?.access_token || ''\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Login a user\r\n   * @param credentials User login credentials\r\n   * @returns User object and session token\r\n   */\r\n  async login(credentials: { email: string; password: string }): Promise<{ user: User.Response; token: string }> {\r\n    // Authenticate with Supabase Auth\r\n    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\r\n      email: credentials.email,\r\n      password: credentials.password\r\n    });\r\n    \r\n    if (authError) {\r\n      throw new Error(`Authentication error: ${authError.message}`);\r\n    }\r\n    \r\n    if (!authData.user) {\r\n      throw new Error('Authentication failed');\r\n    }\r\n    \r\n    // Get user profile from users table\r\n    const { data: profileData, error: profileError } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('id', authData.user.id)\r\n      .single();\r\n    \r\n    if (profileError) {\r\n      throw new Error(`Profile retrieval error: ${profileError.message}`);\r\n    }\r\n    \r\n    return {\r\n      user: {\r\n        id: profileData.id,\r\n        email: profileData.email,\r\n        name: profileData.name,\r\n        createdAt: profileData.created_at,\r\n        updatedAt: profileData.updated_at\r\n      },\r\n      token: authData.session?.access_token || ''\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Logout a user\r\n   * @param token The session token to invalidate\r\n   * @returns Success indicator\r\n   */\r\n  async logout(token: string): Promise<boolean> {\r\n    const { error } = await supabase.auth.admin.signOut(token);\r\n    \r\n    if (error) {\r\n      throw new Error(`Logout error: ${error.message}`);\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Get current user profile\r\n   * @param userId User ID\r\n   * @returns User profile\r\n   */\r\n  async getProfile(userId: string): Promise<User.Response> {\r\n    const { data, error } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single();\r\n    \r\n    if (error) {\r\n      throw new Error(`Profile retrieval error: ${error.message}`);\r\n    }\r\n    \r\n    return {\r\n      id: data.id,\r\n      email: data.email,\r\n      name: data.name,\r\n      createdAt: data.created_at,\r\n      updatedAt: data.updated_at\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Update user profile\r\n   * @param userId User ID\r\n   * @param userData User data to update\r\n   * @returns Updated user profile\r\n   */\r\n  async updateProfile(userId: string, userData: User.UpdateRequest): Promise<User.Response> {\r\n    const updates = {\r\n      ...(userData.name && { name: userData.name }),\r\n      ...(userData.email && { email: userData.email }),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    const { data, error } = await supabase\r\n      .from('users')\r\n      .update(updates)\r\n      .eq('id', userId)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      throw new Error(`Profile update error: ${error.message}`);\r\n    }\r\n    \r\n    // Update auth email if email was changed\r\n    if (userData.email) {\r\n      const { error: authError } = await supabase.auth.admin.updateUserById(\r\n        userId,\r\n        { email: userData.email }\r\n      );\r\n      \r\n      if (authError) {\r\n        // This should not block the operation, but we should log it\r\n        console.error(`Auth email update error: ${authError.message}`);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      id: data.id,\r\n      email: data.email,\r\n      name: data.name,\r\n      createdAt: data.created_at,\r\n      updatedAt: data.updated_at\r\n    };\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const authService = new AuthService();\r\nexport default authService; "]}