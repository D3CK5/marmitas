{"version":3,"file":"validation.schemas.js","sourceRoot":"","sources":["../../src/models/validation.schemas.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB;;GAEG;AAEH,yBAAyB;AACzB,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC;IAClC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC;IAC/C,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC;CACtE,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC;IACrC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC;IAC/C,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC;IACrE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,oCAAoC,CAAC;CAC9D,CAAC,CAAC;AAEH,eAAe;AACf,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC;IACvC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,oCAAoC,CAAC,CAAC,QAAQ,EAAE;IACxE,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,QAAQ,EAAE;CAC3D,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC9C,OAAO,EAAE,gDAAgD;CAC1D,CAAC,CAAC;AAEH,kBAAkB;AAClB,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC1C,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,4CAA4C,CAAC;IACrE,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,4CAA4C,CAAC;IAC7E,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,iCAAiC,CAAC;IAC7D,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,QAAQ,EAAE;IACxD,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC;IACrE,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;CACvC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC1C,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,4CAA4C,CAAC,CAAC,QAAQ,EAAE;IAChF,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,4CAA4C,CAAC,CAAC,QAAQ,EAAE;IACxF,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,iCAAiC,CAAC,CAAC,QAAQ,EAAE;IACxE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,QAAQ,EAAE;IACxD,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC,CAAC,QAAQ,EAAE;IAChF,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;CACpC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC9C,OAAO,EAAE,gDAAgD;CAC1D,CAAC,CAAC;AAEH,gBAAgB;AAChB,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,CAAC,MAAM,CAAC;IACtC,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC;IACvD,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,qCAAqC,CAAC;CAC3E,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC;IACxC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,sCAAsC,CAAC;IAC9E,eAAe,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,iDAAiD,CAAC,CAAC,QAAQ,EAAE;CAClG,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC;IACxC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE;IAC9E,eAAe,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,iDAAiD,CAAC,CAAC,QAAQ,EAAE;CAClG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC9C,OAAO,EAAE,gDAAgD;CAC1D,CAAC,CAAC;AAEH,oBAAoB;AACpB,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC;IACvC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACnD,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IACjE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC;IACrC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;CACnD,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\r\n\r\n/**\r\n * Validation schemas for API requests\r\n */\r\n\r\n// Authentication schemas\r\nexport const loginSchema = z.object({\r\n  email: z.string().email('Invalid email format'),\r\n  password: z.string().min(6, 'Password must be at least 6 characters')\r\n});\r\n\r\nexport const registerSchema = z.object({\r\n  email: z.string().email('Invalid email format'),\r\n  password: z.string().min(6, 'Password must be at least 6 characters'),\r\n  name: z.string().min(2, 'Name must be at least 2 characters')\r\n});\r\n\r\n// User schemas\r\nexport const updateUserSchema = z.object({\r\n  name: z.string().min(2, 'Name must be at least 2 characters').optional(),\r\n  email: z.string().email('Invalid email format').optional()\r\n}).refine(data => Object.keys(data).length > 0, {\r\n  message: 'At least one field must be provided for update'\r\n});\r\n\r\n// Product schemas\r\nexport const createProductSchema = z.object({\r\n  name: z.string().min(2, 'Product name must be at least 2 characters'),\r\n  description: z.string().min(10, 'Description must be at least 10 characters'),\r\n  price: z.number().positive('Price must be a positive number'),\r\n  imageUrl: z.string().url('Invalid image URL').optional(),\r\n  category: z.string().min(2, 'Category must be at least 2 characters'),\r\n  isAvailable: z.boolean().default(true)\r\n});\r\n\r\nexport const updateProductSchema = z.object({\r\n  name: z.string().min(2, 'Product name must be at least 2 characters').optional(),\r\n  description: z.string().min(10, 'Description must be at least 10 characters').optional(),\r\n  price: z.number().positive('Price must be a positive number').optional(),\r\n  imageUrl: z.string().url('Invalid image URL').optional(),\r\n  category: z.string().min(2, 'Category must be at least 2 characters').optional(),\r\n  isAvailable: z.boolean().optional()\r\n}).refine(data => Object.keys(data).length > 0, {\r\n  message: 'At least one field must be provided for update'\r\n});\r\n\r\n// Order schemas\r\nexport const orderItemSchema = z.object({\r\n  productId: z.string().uuid('Invalid product ID format'),\r\n  quantity: z.number().int().positive('Quantity must be a positive integer')\r\n});\r\n\r\nexport const createOrderSchema = z.object({\r\n  items: z.array(orderItemSchema).min(1, 'Order must contain at least one item'),\r\n  deliveryAddress: z.string().min(10, 'Delivery address must be at least 10 characters').optional()\r\n});\r\n\r\nexport const updateOrderSchema = z.object({\r\n  status: z.enum(['pending', 'processing', 'completed', 'cancelled']).optional(),\r\n  deliveryAddress: z.string().min(10, 'Delivery address must be at least 10 characters').optional()\r\n}).refine(data => Object.keys(data).length > 0, {\r\n  message: 'At least one field must be provided for update'\r\n});\r\n\r\n// Pagination schema\r\nexport const paginationSchema = z.object({\r\n  page: z.coerce.number().int().positive().default(1),\r\n  pageSize: z.coerce.number().int().positive().max(100).default(10),\r\n  sort: z.string().default('createdAt'),\r\n  direction: z.enum(['asc', 'desc']).default('desc')\r\n}); "]}